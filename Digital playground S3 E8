{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 123,
   "id": "be40ef27",
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "import pandas as pd \n",
    "import seaborn as sns\n",
    "import numpy as np \n",
    "from sklearn.model_selection import StratifiedKFold\n",
    "from sklearn.preprocessing import OrdinalEncoder\n",
    "from sklearn.preprocessing import LabelEncoder\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.linear_model import LassoCV\n",
    "from sklearn.preprocessing import StandardScaler\n",
    "from sklearn.metrics import roc_auc_score, mean_squared_error\n",
    "import xgboost as xgb\n",
    "import lightgbm as lgbm\n",
    "import catboost"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d1224ac2",
   "metadata": {},
   "source": [
    "this is where ı get some information about columns\n",
    "A description of the clarity:\n",
    "\n",
    "https://abovediamond.com/learn-diamond-clarity/\n",
    "\n",
    "\n",
    "Carat: a weight of the cubic zirconia. A metric “carat” is defined as 200 milligrams.\n",
    "Cut:  describes the cut quality of the cubic zirconia. Quality is increasing order Fair, Good, Very Good, Premium, Ideal.\n",
    "Color:  refers to the color of the cubic zirconia. With D being the best and J the worst.\n",
    "Clarity: refers to the absence of the Inclusions and Blemishes. (In order from Best to Worst, FL = flawless, I3= level 3 inclusions) FL, IF, VVS1, VVS2, VS1, VS2, SI1, SI2, I1, I2, I3\n",
    "Depth:  the height of a cubic zirconia, measured from the Culet to the table, divided by its average Girdle Diameter.\n",
    "Table:  the width of the cubic zirconia's Table expressed as a Percentage of its Average Diameter.\n",
    "X:  Length of the cubic zirconia in mm.\n",
    "Y:  Width of the cubic zirconia in mm.\n",
    "Z:  Height of the cubic zirconia in mm."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 89,
   "id": "bf453cd3",
   "metadata": {},
   "outputs": [],
   "source": [
    "train = pd.read_csv(\"train.csv\").drop(columns = \"id\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 90,
   "id": "10ce1297",
   "metadata": {},
   "outputs": [],
   "source": [
    "origin = pd.read_csv(\"original_dataset.csv\").drop(columns='Unnamed: 0')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 91,
   "id": "27fad6ee",
   "metadata": {},
   "outputs": [],
   "source": [
    "test = pd.read_csv(\"test.csv\").drop(columns = \"id\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 131,
   "id": "02cec245",
   "metadata": {},
   "outputs": [],
   "source": [
    "splgm = pd.read_csv(\"sample_submission.csv\")\n",
    "spens = pd.read_csv(\"sample_submission.csv\")\n",
    "spcat = pd.read_csv(\"sample_submission.csv\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 93,
   "id": "d3071156",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>carat</th>\n",
       "      <th>cut</th>\n",
       "      <th>color</th>\n",
       "      <th>clarity</th>\n",
       "      <th>depth</th>\n",
       "      <th>table</th>\n",
       "      <th>x</th>\n",
       "      <th>y</th>\n",
       "      <th>z</th>\n",
       "      <th>price</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1.52</td>\n",
       "      <td>Premium</td>\n",
       "      <td>F</td>\n",
       "      <td>VS2</td>\n",
       "      <td>62.2</td>\n",
       "      <td>58.0</td>\n",
       "      <td>7.27</td>\n",
       "      <td>7.33</td>\n",
       "      <td>4.55</td>\n",
       "      <td>13619</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2.03</td>\n",
       "      <td>Very Good</td>\n",
       "      <td>J</td>\n",
       "      <td>SI2</td>\n",
       "      <td>62.0</td>\n",
       "      <td>58.0</td>\n",
       "      <td>8.06</td>\n",
       "      <td>8.12</td>\n",
       "      <td>5.05</td>\n",
       "      <td>13387</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0.70</td>\n",
       "      <td>Ideal</td>\n",
       "      <td>G</td>\n",
       "      <td>VS1</td>\n",
       "      <td>61.2</td>\n",
       "      <td>57.0</td>\n",
       "      <td>5.69</td>\n",
       "      <td>5.73</td>\n",
       "      <td>3.50</td>\n",
       "      <td>2772</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0.32</td>\n",
       "      <td>Ideal</td>\n",
       "      <td>G</td>\n",
       "      <td>VS1</td>\n",
       "      <td>61.6</td>\n",
       "      <td>56.0</td>\n",
       "      <td>4.38</td>\n",
       "      <td>4.41</td>\n",
       "      <td>2.71</td>\n",
       "      <td>666</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1.70</td>\n",
       "      <td>Premium</td>\n",
       "      <td>G</td>\n",
       "      <td>VS2</td>\n",
       "      <td>62.6</td>\n",
       "      <td>59.0</td>\n",
       "      <td>7.65</td>\n",
       "      <td>7.61</td>\n",
       "      <td>4.77</td>\n",
       "      <td>14453</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>1.51</td>\n",
       "      <td>Very Good</td>\n",
       "      <td>J</td>\n",
       "      <td>SI1</td>\n",
       "      <td>62.8</td>\n",
       "      <td>58.0</td>\n",
       "      <td>7.34</td>\n",
       "      <td>7.29</td>\n",
       "      <td>4.59</td>\n",
       "      <td>7506</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>0.74</td>\n",
       "      <td>Ideal</td>\n",
       "      <td>E</td>\n",
       "      <td>VS2</td>\n",
       "      <td>61.8</td>\n",
       "      <td>57.0</td>\n",
       "      <td>5.76</td>\n",
       "      <td>5.79</td>\n",
       "      <td>3.57</td>\n",
       "      <td>3229</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>1.34</td>\n",
       "      <td>Premium</td>\n",
       "      <td>G</td>\n",
       "      <td>SI2</td>\n",
       "      <td>62.5</td>\n",
       "      <td>57.0</td>\n",
       "      <td>7.00</td>\n",
       "      <td>7.05</td>\n",
       "      <td>4.38</td>\n",
       "      <td>6224</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>0.30</td>\n",
       "      <td>Ideal</td>\n",
       "      <td>F</td>\n",
       "      <td>IF</td>\n",
       "      <td>62.0</td>\n",
       "      <td>56.0</td>\n",
       "      <td>4.35</td>\n",
       "      <td>4.37</td>\n",
       "      <td>2.70</td>\n",
       "      <td>886</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>0.30</td>\n",
       "      <td>Good</td>\n",
       "      <td>J</td>\n",
       "      <td>VS1</td>\n",
       "      <td>63.6</td>\n",
       "      <td>57.0</td>\n",
       "      <td>4.26</td>\n",
       "      <td>4.28</td>\n",
       "      <td>2.72</td>\n",
       "      <td>421</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>1.01</td>\n",
       "      <td>Very Good</td>\n",
       "      <td>G</td>\n",
       "      <td>VS2</td>\n",
       "      <td>63.1</td>\n",
       "      <td>57.0</td>\n",
       "      <td>6.40</td>\n",
       "      <td>6.34</td>\n",
       "      <td>4.03</td>\n",
       "      <td>5914</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>0.23</td>\n",
       "      <td>Ideal</td>\n",
       "      <td>E</td>\n",
       "      <td>VVS2</td>\n",
       "      <td>62.0</td>\n",
       "      <td>57.0</td>\n",
       "      <td>3.96</td>\n",
       "      <td>3.98</td>\n",
       "      <td>2.46</td>\n",
       "      <td>505</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>1.01</td>\n",
       "      <td>Good</td>\n",
       "      <td>D</td>\n",
       "      <td>SI1</td>\n",
       "      <td>63.1</td>\n",
       "      <td>56.0</td>\n",
       "      <td>6.41</td>\n",
       "      <td>6.35</td>\n",
       "      <td>4.03</td>\n",
       "      <td>5703</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>0.31</td>\n",
       "      <td>Ideal</td>\n",
       "      <td>G</td>\n",
       "      <td>VVS1</td>\n",
       "      <td>61.8</td>\n",
       "      <td>56.0</td>\n",
       "      <td>4.37</td>\n",
       "      <td>4.39</td>\n",
       "      <td>2.71</td>\n",
       "      <td>789</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>1.01</td>\n",
       "      <td>Good</td>\n",
       "      <td>H</td>\n",
       "      <td>SI1</td>\n",
       "      <td>62.6</td>\n",
       "      <td>59.0</td>\n",
       "      <td>6.34</td>\n",
       "      <td>6.40</td>\n",
       "      <td>3.99</td>\n",
       "      <td>4612</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>0.33</td>\n",
       "      <td>Premium</td>\n",
       "      <td>E</td>\n",
       "      <td>VS2</td>\n",
       "      <td>61.7</td>\n",
       "      <td>59.0</td>\n",
       "      <td>4.39</td>\n",
       "      <td>4.43</td>\n",
       "      <td>2.72</td>\n",
       "      <td>723</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>1.06</td>\n",
       "      <td>Premium</td>\n",
       "      <td>E</td>\n",
       "      <td>SI2</td>\n",
       "      <td>60.9</td>\n",
       "      <td>59.0</td>\n",
       "      <td>6.61</td>\n",
       "      <td>6.56</td>\n",
       "      <td>4.01</td>\n",
       "      <td>4399</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>0.26</td>\n",
       "      <td>Very Good</td>\n",
       "      <td>F</td>\n",
       "      <td>VVS2</td>\n",
       "      <td>61.7</td>\n",
       "      <td>57.0</td>\n",
       "      <td>4.10</td>\n",
       "      <td>4.13</td>\n",
       "      <td>2.53</td>\n",
       "      <td>574</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>1.01</td>\n",
       "      <td>Premium</td>\n",
       "      <td>G</td>\n",
       "      <td>VVS1</td>\n",
       "      <td>61.8</td>\n",
       "      <td>58.0</td>\n",
       "      <td>6.44</td>\n",
       "      <td>6.37</td>\n",
       "      <td>3.96</td>\n",
       "      <td>8701</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>0.73</td>\n",
       "      <td>Very Good</td>\n",
       "      <td>G</td>\n",
       "      <td>VS2</td>\n",
       "      <td>63.1</td>\n",
       "      <td>57.0</td>\n",
       "      <td>5.77</td>\n",
       "      <td>5.75</td>\n",
       "      <td>3.63</td>\n",
       "      <td>2652</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    carat        cut color clarity  depth  table     x     y     z  price\n",
       "0    1.52    Premium     F     VS2   62.2   58.0  7.27  7.33  4.55  13619\n",
       "1    2.03  Very Good     J     SI2   62.0   58.0  8.06  8.12  5.05  13387\n",
       "2    0.70      Ideal     G     VS1   61.2   57.0  5.69  5.73  3.50   2772\n",
       "3    0.32      Ideal     G     VS1   61.6   56.0  4.38  4.41  2.71    666\n",
       "4    1.70    Premium     G     VS2   62.6   59.0  7.65  7.61  4.77  14453\n",
       "5    1.51  Very Good     J     SI1   62.8   58.0  7.34  7.29  4.59   7506\n",
       "6    0.74      Ideal     E     VS2   61.8   57.0  5.76  5.79  3.57   3229\n",
       "7    1.34    Premium     G     SI2   62.5   57.0  7.00  7.05  4.38   6224\n",
       "8    0.30      Ideal     F      IF   62.0   56.0  4.35  4.37  2.70    886\n",
       "9    0.30       Good     J     VS1   63.6   57.0  4.26  4.28  2.72    421\n",
       "10   1.01  Very Good     G     VS2   63.1   57.0  6.40  6.34  4.03   5914\n",
       "11   0.23      Ideal     E    VVS2   62.0   57.0  3.96  3.98  2.46    505\n",
       "12   1.01       Good     D     SI1   63.1   56.0  6.41  6.35  4.03   5703\n",
       "13   0.31      Ideal     G    VVS1   61.8   56.0  4.37  4.39  2.71    789\n",
       "14   1.01       Good     H     SI1   62.6   59.0  6.34  6.40  3.99   4612\n",
       "15   0.33    Premium     E     VS2   61.7   59.0  4.39  4.43  2.72    723\n",
       "16   1.06    Premium     E     SI2   60.9   59.0  6.61  6.56  4.01   4399\n",
       "17   0.26  Very Good     F    VVS2   61.7   57.0  4.10  4.13  2.53    574\n",
       "18   1.01    Premium     G    VVS1   61.8   58.0  6.44  6.37  3.96   8701\n",
       "19   0.73  Very Good     G     VS2   63.1   57.0  5.77  5.75  3.63   2652"
      ]
     },
     "execution_count": 93,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train.head(20)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 94,
   "id": "a1253fb7",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "((193573, 10), (129050, 9))"
      ]
     },
     "execution_count": 94,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train.shape , test.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 95,
   "id": "e23d423f",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 193573 entries, 0 to 193572\n",
      "Data columns (total 10 columns):\n",
      " #   Column   Non-Null Count   Dtype  \n",
      "---  ------   --------------   -----  \n",
      " 0   carat    193573 non-null  float64\n",
      " 1   cut      193573 non-null  object \n",
      " 2   color    193573 non-null  object \n",
      " 3   clarity  193573 non-null  object \n",
      " 4   depth    193573 non-null  float64\n",
      " 5   table    193573 non-null  float64\n",
      " 6   x        193573 non-null  float64\n",
      " 7   y        193573 non-null  float64\n",
      " 8   z        193573 non-null  float64\n",
      " 9   price    193573 non-null  int64  \n",
      "dtypes: float64(6), int64(1), object(3)\n",
      "memory usage: 14.8+ MB\n",
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 129050 entries, 0 to 129049\n",
      "Data columns (total 9 columns):\n",
      " #   Column   Non-Null Count   Dtype  \n",
      "---  ------   --------------   -----  \n",
      " 0   carat    129050 non-null  float64\n",
      " 1   cut      129050 non-null  object \n",
      " 2   color    129050 non-null  object \n",
      " 3   clarity  129050 non-null  object \n",
      " 4   depth    129050 non-null  float64\n",
      " 5   table    129050 non-null  float64\n",
      " 6   x        129050 non-null  float64\n",
      " 7   y        129050 non-null  float64\n",
      " 8   z        129050 non-null  float64\n",
      "dtypes: float64(6), object(3)\n",
      "memory usage: 8.9+ MB\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "(None, None)"
      ]
     },
     "execution_count": 95,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train.info(),test.info()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "03f637ea",
   "metadata": {},
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 96,
   "id": "8e0aebb4",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>count</th>\n",
       "      <th>mean</th>\n",
       "      <th>std</th>\n",
       "      <th>min</th>\n",
       "      <th>25%</th>\n",
       "      <th>50%</th>\n",
       "      <th>75%</th>\n",
       "      <th>max</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>carat</th>\n",
       "      <td>193573.0</td>\n",
       "      <td>0.790688</td>\n",
       "      <td>0.462688</td>\n",
       "      <td>0.2</td>\n",
       "      <td>0.40</td>\n",
       "      <td>0.70</td>\n",
       "      <td>1.03</td>\n",
       "      <td>3.50</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>depth</th>\n",
       "      <td>193573.0</td>\n",
       "      <td>61.820574</td>\n",
       "      <td>1.081704</td>\n",
       "      <td>52.1</td>\n",
       "      <td>61.30</td>\n",
       "      <td>61.90</td>\n",
       "      <td>62.40</td>\n",
       "      <td>71.60</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>table</th>\n",
       "      <td>193573.0</td>\n",
       "      <td>57.227675</td>\n",
       "      <td>1.918844</td>\n",
       "      <td>49.0</td>\n",
       "      <td>56.00</td>\n",
       "      <td>57.00</td>\n",
       "      <td>58.00</td>\n",
       "      <td>79.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>x</th>\n",
       "      <td>193573.0</td>\n",
       "      <td>5.715312</td>\n",
       "      <td>1.109422</td>\n",
       "      <td>0.0</td>\n",
       "      <td>4.70</td>\n",
       "      <td>5.70</td>\n",
       "      <td>6.51</td>\n",
       "      <td>9.65</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>y</th>\n",
       "      <td>193573.0</td>\n",
       "      <td>5.720094</td>\n",
       "      <td>1.102333</td>\n",
       "      <td>0.0</td>\n",
       "      <td>4.71</td>\n",
       "      <td>5.72</td>\n",
       "      <td>6.51</td>\n",
       "      <td>10.01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>z</th>\n",
       "      <td>193573.0</td>\n",
       "      <td>3.534246</td>\n",
       "      <td>0.688922</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.90</td>\n",
       "      <td>3.53</td>\n",
       "      <td>4.03</td>\n",
       "      <td>31.30</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>price</th>\n",
       "      <td>193573.0</td>\n",
       "      <td>3969.155414</td>\n",
       "      <td>4034.374138</td>\n",
       "      <td>326.0</td>\n",
       "      <td>951.00</td>\n",
       "      <td>2401.00</td>\n",
       "      <td>5408.00</td>\n",
       "      <td>18818.00</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "          count         mean          std    min     25%      50%      75%  \\\n",
       "carat  193573.0     0.790688     0.462688    0.2    0.40     0.70     1.03   \n",
       "depth  193573.0    61.820574     1.081704   52.1   61.30    61.90    62.40   \n",
       "table  193573.0    57.227675     1.918844   49.0   56.00    57.00    58.00   \n",
       "x      193573.0     5.715312     1.109422    0.0    4.70     5.70     6.51   \n",
       "y      193573.0     5.720094     1.102333    0.0    4.71     5.72     6.51   \n",
       "z      193573.0     3.534246     0.688922    0.0    2.90     3.53     4.03   \n",
       "price  193573.0  3969.155414  4034.374138  326.0  951.00  2401.00  5408.00   \n",
       "\n",
       "            max  \n",
       "carat      3.50  \n",
       "depth     71.60  \n",
       "table     79.00  \n",
       "x          9.65  \n",
       "y         10.01  \n",
       "z         31.30  \n",
       "price  18818.00  "
      ]
     },
     "execution_count": 96,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train.describe().T\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 97,
   "id": "a9be3126",
   "metadata": {},
   "outputs": [],
   "source": [
    "target = \"price\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 98,
   "id": "454520b8",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0     13619\n",
       "1     13387\n",
       "2      2772\n",
       "3       666\n",
       "4     14453\n",
       "5      7506\n",
       "6      3229\n",
       "7      6224\n",
       "8       886\n",
       "9       421\n",
       "10     5914\n",
       "11      505\n",
       "12     5703\n",
       "13      789\n",
       "14     4612\n",
       "15      723\n",
       "16     4399\n",
       "17      574\n",
       "18     8701\n",
       "19     2652\n",
       "Name: price, dtype: int64"
      ]
     },
     "execution_count": 98,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train[target].head(20)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 99,
   "id": "d5b562cb",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(carat      0\n",
       " cut        0\n",
       " color      0\n",
       " clarity    0\n",
       " depth      0\n",
       " table      0\n",
       " x          0\n",
       " y          0\n",
       " z          0\n",
       " price      0\n",
       " dtype: int64,\n",
       " carat      0\n",
       " cut        0\n",
       " color      0\n",
       " clarity    0\n",
       " depth      0\n",
       " table      0\n",
       " x          0\n",
       " y          0\n",
       " z          0\n",
       " dtype: int64,\n",
       " carat        0\n",
       " cut          0\n",
       " color        0\n",
       " clarity      0\n",
       " depth      697\n",
       " table        0\n",
       " x            0\n",
       " y            0\n",
       " z            0\n",
       " price        0\n",
       " dtype: int64)"
      ]
     },
     "execution_count": 99,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train.isnull().sum() ,test.isnull().sum(),origin.isnull().sum()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8962193a",
   "metadata": {},
   "source": [
    "TARGET DİSTRİBUTİON"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 100,
   "id": "104ed568",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.legend.Legend at 0x29490fa91f0>"
      ]
     },
     "execution_count": 100,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 800x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(8,6))\n",
    "sns.kdeplot(data=train, x=target, label='train')\n",
    "sns.kdeplot(data=origin, x=target, label='original')\n",
    "plt.legend()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 101,
   "id": "a9fc5d4a",
   "metadata": {},
   "outputs": [],
   "source": [
    " from sklearn.preprocessing import OrdinalEncoder"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 102,
   "id": "2f0e230a",
   "metadata": {},
   "outputs": [],
   "source": [
    "def process(df):\n",
    "    df['cut'] = df['cut'].apply(lambda x: cut_dic[x])\n",
    "    df['color'] = df['color'].apply(lambda x:color_dic[x])\n",
    "    df['clarity'] = df['clarity'].apply(lambda x:clarity_dic[x])\n",
    "    df[\"volume\"] = df[\"x\"] * df[\"y\"] * df[\"z\"]\n",
    "    df[\"surface_area\"] = 2 * (df[\"x\"] * df[\"y\"] + df[\"y\"] * df[\"z\"] + df[\"z\"] * df[\"x\"])\n",
    "    df[\"aspect_ratio_xy\"] = df[\"x\"] / df[\"y\"]\n",
    "    df[\"aspect_ratio_yz\"] = df[\"y\"] / df[\"z\"]\n",
    "    df[\"aspect_ratio_zx\"] = df[\"z\"] / df[\"x\"]\n",
    "    df[\"diagonal_distance\"] = np.sqrt(df[\"x\"] ** 2 + df[\"y\"] ** 2 + df[\"z\"] ** 2)\n",
    "    df[\"relative_height\"] = (df[\"z\"] - df[\"z\"].min()) / (df[\"z\"].max() - df[\"z\"].min())\n",
    "    df[\"relative_position\"] = (df[\"x\"] + df[\"y\"] + df[\"z\"]) / (df[\"x\"] + df[\"y\"] + df[\"z\"]).sum()\n",
    "    df[\"volume_ratio\"] = df[\"x\"] * df[\"y\"] * df[\"z\"] / (df[\"x\"].mean() * df[\"y\"].mean() * df[\"z\"].mean())\n",
    "    df[\"length_ratio\"] = df[\"x\"] / df[\"x\"].mean()\n",
    "    df[\"width_ratio\"] = df[\"y\"] / df[\"y\"].mean()\n",
    "    df[\"height_ratio\"] = df[\"z\"] / df[\"z\"].mean()\n",
    "    df[\"sphericity\"] = 1.4641 * (6 * df[\"volume\"])**(2/3) / df[\"surface_area\"]\n",
    "    df[\"compactness\"] = df[\"volume\"]**(1/3) / df[\"x\"]\n",
    "    \n",
    "    return df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 103,
   "id": "c37b5efd",
   "metadata": {},
   "outputs": [],
   "source": [
    "cut_dic = {'Fair':0,'Good':1,'Very Good':2,'Premium':3,'Ideal':4}\n",
    "color_dic = {'D':6,'E':5,'F':4,'G':3,'H':2,'I':1,'J':0}\n",
    "clarity_dic = {'FL':10, 'IF':9, 'VVS1':8, 'VVS2':7, 'VS1':6, 'VS2':5, 'SI1':4, 'SI2':3, 'I1':2, 'I2':1, 'I3':0}\n",
    "train_df = process(train)\n",
    "test_df = process(test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 104,
   "id": "a1b2cbd5",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "((193573, 24), (129050, 23))"
      ]
     },
     "execution_count": 104,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train.shape , test.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 107,
   "id": "f99aa4ed",
   "metadata": {},
   "outputs": [],
   "source": [
    "y = train.price"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 108,
   "id": "b09ff83a",
   "metadata": {},
   "outputs": [],
   "source": [
    "x_train = train.drop(columns = \"price\", axis = 1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 109,
   "id": "d4f266dd",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(193573, 23)"
      ]
     },
     "execution_count": 109,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x_train.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 113,
   "id": "8d7b6a72",
   "metadata": {},
   "outputs": [],
   "source": [
    "x_train, x_val, y_train, y_val = train_test_split(x_train, y, test_size=0.2, random_state=0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 122,
   "id": "5ebb7a81",
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "lgbm_params = {\n",
    "        'task': 'train',\n",
    "        'objective': \"regression\",\n",
    "        'metric': \"rmse\",\n",
    "        'boosting_type': 'gbdt',\n",
    "        'learning_rate': 0.0005,\n",
    "        'num_iterations': 300000,\n",
    "        'max_depth': -1,\n",
    "        'feature_pre_filter': False,\n",
    "        'lambda_l1': 2.877895439833595e-06,\n",
    "        'lambda_l2': 0.00046039862026592493,\n",
    "        'num_leaves': 31,\n",
    "        'feature_fraction': 0.7,\n",
    "        'bagging_fraction': 1.0,\n",
    "        'bagging_freq': 0,\n",
    "        'min_child_samples': 50,\n",
    "        'verbosity': -1\n",
    "    }\n",
    "lgb_train = lgbm.Dataset(x_train, y_train)\n",
    "lgb_eval = lgbm.Dataset(x_val, y_val, reference=lgb_train)\n",
    "evaluation_results = {}                       "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 124,
   "id": "949d7743",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\diyar\\anaconda3\\lib\\site-packages\\lightgbm\\engine.py:177: UserWarning: Found `num_iterations` in params. Will use it instead of argument\n",
      "  _log_warning(f\"Found `{alias}` in params. Will use it instead of argument\")\n",
      "C:\\Users\\diyar\\anaconda3\\lib\\site-packages\\lightgbm\\engine.py:181: UserWarning: 'early_stopping_rounds' argument is deprecated and will be removed in a future release of LightGBM. Pass 'early_stopping()' callback via 'callbacks' argument instead.\n",
      "  _log_warning(\"'early_stopping_rounds' argument is deprecated and will be removed in a future release of LightGBM. \"\n",
      "C:\\Users\\diyar\\anaconda3\\lib\\site-packages\\lightgbm\\engine.py:239: UserWarning: 'verbose_eval' argument is deprecated and will be removed in a future release of LightGBM. Pass 'log_evaluation()' callback via 'callbacks' argument instead.\n",
      "  _log_warning(\"'verbose_eval' argument is deprecated and will be removed in a future release of LightGBM. \"\n",
      "C:\\Users\\diyar\\anaconda3\\lib\\site-packages\\lightgbm\\engine.py:260: UserWarning: 'evals_result' argument is deprecated and will be removed in a future release of LightGBM. Pass 'record_evaluation()' callback via 'callbacks' argument instead.\n",
      "  _log_warning(\"'evals_result' argument is deprecated and will be removed in a future release of LightGBM. \"\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Training until validation scores don't improve for 1000 rounds\n",
      "[1000]\ttrain's rmse: 2537.17\tvalid's rmse: 2540.57\n",
      "[2000]\ttrain's rmse: 1654.57\tvalid's rmse: 1656.98\n",
      "[3000]\ttrain's rmse: 1149.41\tvalid's rmse: 1151.55\n",
      "[4000]\ttrain's rmse: 873.862\tvalid's rmse: 875.686\n",
      "[5000]\ttrain's rmse: 730.244\tvalid's rmse: 732.103\n",
      "[6000]\ttrain's rmse: 656.831\tvalid's rmse: 658.824\n",
      "[7000]\ttrain's rmse: 619.027\tvalid's rmse: 621.366\n",
      "[8000]\ttrain's rmse: 598.221\tvalid's rmse: 601.058\n",
      "[9000]\ttrain's rmse: 586.1\tvalid's rmse: 589.503\n",
      "[10000]\ttrain's rmse: 578.678\tvalid's rmse: 582.856\n",
      "[11000]\ttrain's rmse: 573.64\tvalid's rmse: 578.622\n",
      "[12000]\ttrain's rmse: 570.029\tvalid's rmse: 576.054\n",
      "[13000]\ttrain's rmse: 567.16\tvalid's rmse: 574.499\n",
      "[14000]\ttrain's rmse: 564.874\tvalid's rmse: 573.494\n",
      "[15000]\ttrain's rmse: 562.877\tvalid's rmse: 572.833\n",
      "[16000]\ttrain's rmse: 560.99\tvalid's rmse: 572.418\n",
      "[17000]\ttrain's rmse: 559.243\tvalid's rmse: 572.132\n",
      "[18000]\ttrain's rmse: 557.661\tvalid's rmse: 571.894\n",
      "[19000]\ttrain's rmse: 556.17\tvalid's rmse: 571.742\n",
      "[20000]\ttrain's rmse: 554.767\tvalid's rmse: 571.645\n",
      "[21000]\ttrain's rmse: 553.423\tvalid's rmse: 571.587\n",
      "[22000]\ttrain's rmse: 552.171\tvalid's rmse: 571.566\n",
      "[23000]\ttrain's rmse: 550.949\tvalid's rmse: 571.557\n",
      "[24000]\ttrain's rmse: 549.768\tvalid's rmse: 571.561\n",
      "Early stopping, best iteration is:\n",
      "[23056]\ttrain's rmse: 550.883\tvalid's rmse: 571.555\n"
     ]
    }
   ],
   "source": [
    "evaluation_results = {}                       \n",
    "model = lgbm.train(\n",
    "    lgbm_params,\n",
    "    valid_names=['train', 'valid'],           \n",
    "    valid_sets=[lgb_train, lgb_eval],     \n",
    "    evals_result=evaluation_results,      \n",
    "    train_set=lgb_train,\n",
    "    early_stopping_rounds=1000,\n",
    "    verbose_eval=1000\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 125,
   "id": "3ecbc38a",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Learning rate set to 0.027588\n",
      "0:\tlearn: 3932.4459689\ttest: 3937.3839450\tbest: 3937.3839450 (0)\ttotal: 188ms\tremaining: 31m 15s\n",
      "100:\tlearn: 729.6039536\ttest: 729.3462851\tbest: 729.3462851 (100)\ttotal: 1.23s\tremaining: 2m\n",
      "200:\tlearn: 601.4933999\ttest: 601.0753471\tbest: 601.0753471 (200)\ttotal: 2.26s\tremaining: 1m 50s\n",
      "300:\tlearn: 584.3547281\ttest: 584.4624513\tbest: 584.4624513 (300)\ttotal: 3.2s\tremaining: 1m 43s\n",
      "400:\tlearn: 577.2120557\ttest: 578.6740773\tbest: 578.6740773 (400)\ttotal: 4.13s\tremaining: 1m 38s\n",
      "500:\tlearn: 572.5841166\ttest: 575.9528460\tbest: 575.9528460 (500)\ttotal: 5.13s\tremaining: 1m 37s\n",
      "600:\tlearn: 568.8189690\ttest: 574.4751215\tbest: 574.4704210 (599)\ttotal: 6.16s\tremaining: 1m 36s\n",
      "700:\tlearn: 565.9769538\ttest: 573.4057976\tbest: 573.4057976 (700)\ttotal: 7.18s\tremaining: 1m 35s\n",
      "800:\tlearn: 563.1113771\ttest: 572.8097968\tbest: 572.8097968 (800)\ttotal: 8.19s\tremaining: 1m 34s\n",
      "900:\tlearn: 560.5091715\ttest: 572.4662758\tbest: 572.4600959 (899)\ttotal: 9.2s\tremaining: 1m 32s\n",
      "1000:\tlearn: 558.2120238\ttest: 572.0657312\tbest: 572.0632582 (999)\ttotal: 10.2s\tremaining: 1m 31s\n",
      "1100:\tlearn: 556.0228034\ttest: 571.8636842\tbest: 571.8488220 (1091)\ttotal: 11.2s\tremaining: 1m 30s\n",
      "1200:\tlearn: 553.9932563\ttest: 571.5802385\tbest: 571.5771234 (1199)\ttotal: 12.1s\tremaining: 1m 28s\n",
      "1300:\tlearn: 551.9699993\ttest: 571.5119080\tbest: 571.4868701 (1268)\ttotal: 13.2s\tremaining: 1m 28s\n",
      "1400:\tlearn: 549.9758675\ttest: 571.5667440\tbest: 571.4844312 (1303)\ttotal: 14.2s\tremaining: 1m 26s\n",
      "Stopped by overfitting detector  (100 iterations wait)\n",
      "\n",
      "bestTest = 571.4844312\n",
      "bestIteration = 1303\n",
      "\n",
      "Shrink model to first 1304 iterations.\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<catboost.core.CatBoostRegressor at 0x29493abc2e0>"
      ]
     },
     "execution_count": 125,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "catboost_clf = catboost.CatBoostRegressor(n_estimators=10000,random_state=100,verbose= 100, loss_function='RMSE',eval_metric=\"RMSE\")\n",
    "\n",
    "catboost_clf.fit(x_train, y_train,\n",
    "                 early_stopping_rounds=100, \n",
    "             eval_set=[(x_val, y_val)])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 127,
   "id": "679dd97a",
   "metadata": {},
   "outputs": [],
   "source": [
    "lgbm_preds = model.predict(test)\n",
    "cat_preds = catboost_clf.predict(test)\n",
    "final_preds = np.column_stack([lgbm_preds, cat_preds]).mean(axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 132,
   "id": "0376dcf7",
   "metadata": {},
   "outputs": [],
   "source": [
    "splgm[\"price\"] = lgbm_preds\n",
    "splgm.to_csv(\"lgbm.csv\" , index = False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 133,
   "id": "5d7ff76c",
   "metadata": {},
   "outputs": [],
   "source": [
    "spcat[\"price\"] = cat_preds\n",
    "spcat.to_csv(\"cat.csv\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 134,
   "id": "e5ee9ab2",
   "metadata": {},
   "outputs": [],
   "source": [
    "sp[\"price\"] = final_preds\n",
    "sp.to_csv(\"ensemble.csv\" , index = False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 142,
   "id": "b0fdd5af",
   "metadata": {},
   "outputs": [],
   "source": [
    "submission2 = pd.read_csv(\"cat.csv\").drop(columns = \"Unnamed: 0\" )"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 137,
   "id": "11d2d506",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>id</th>\n",
       "      <th>price</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>193573</td>\n",
       "      <td>1329.872046</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>193574</td>\n",
       "      <td>2670.570140</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>193575</td>\n",
       "      <td>2488.188182</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>193576</td>\n",
       "      <td>1279.620544</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>193577</td>\n",
       "      <td>6648.893272</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>129045</th>\n",
       "      <td>322618</td>\n",
       "      <td>4403.581742</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>129046</th>\n",
       "      <td>322619</td>\n",
       "      <td>2768.025093</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>129047</th>\n",
       "      <td>322620</td>\n",
       "      <td>7818.915303</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>129048</th>\n",
       "      <td>322621</td>\n",
       "      <td>6683.036947</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>129049</th>\n",
       "      <td>322622</td>\n",
       "      <td>4204.107410</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>129050 rows × 2 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "            id        price\n",
       "0       193573  1329.872046\n",
       "1       193574  2670.570140\n",
       "2       193575  2488.188182\n",
       "3       193576  1279.620544\n",
       "4       193577  6648.893272\n",
       "...        ...          ...\n",
       "129045  322618  4403.581742\n",
       "129046  322619  2768.025093\n",
       "129047  322620  7818.915303\n",
       "129048  322621  6683.036947\n",
       "129049  322622  4204.107410\n",
       "\n",
       "[129050 rows x 2 columns]"
      ]
     },
     "execution_count": 137,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pd.read_csv(\"ensemble.csv\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 140,
   "id": "6b19882c",
   "metadata": {},
   "outputs": [],
   "source": [
    "sp.to_csv(\"submission.csv\",index= 0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 141,
   "id": "f508c8c4",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>id</th>\n",
       "      <th>price</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>193573</td>\n",
       "      <td>1329.872046</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>193574</td>\n",
       "      <td>2670.570140</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>193575</td>\n",
       "      <td>2488.188182</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>193576</td>\n",
       "      <td>1279.620544</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>193577</td>\n",
       "      <td>6648.893272</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>129045</th>\n",
       "      <td>322618</td>\n",
       "      <td>4403.581742</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>129046</th>\n",
       "      <td>322619</td>\n",
       "      <td>2768.025093</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>129047</th>\n",
       "      <td>322620</td>\n",
       "      <td>7818.915303</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>129048</th>\n",
       "      <td>322621</td>\n",
       "      <td>6683.036947</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>129049</th>\n",
       "      <td>322622</td>\n",
       "      <td>4204.107410</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>129050 rows × 2 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "            id        price\n",
       "0       193573  1329.872046\n",
       "1       193574  2670.570140\n",
       "2       193575  2488.188182\n",
       "3       193576  1279.620544\n",
       "4       193577  6648.893272\n",
       "...        ...          ...\n",
       "129045  322618  4403.581742\n",
       "129046  322619  2768.025093\n",
       "129047  322620  7818.915303\n",
       "129048  322621  6683.036947\n",
       "129049  322622  4204.107410\n",
       "\n",
       "[129050 rows x 2 columns]"
      ]
     },
     "execution_count": 141,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pd.read_csv(\"submission.csv\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 148,
   "id": "0ce57333",
   "metadata": {},
   "outputs": [],
   "source": [
    "submission2.to_csv(\"submission2.csv\",index= 0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "533b2d49",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.13"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
